"use client";

import { Download, Edit, FileText, X } from "lucide-react";
import React from "react";
import MarkdownRenderer from "./MarkdownRenderer";

interface AgentResultDialogProps {
  isOpen: boolean;
  onClose: () => void;
  taskName: string;
  agentType: string;
  result: {
    content: string;
    format: string;
    metadata: any;
  };
  files: Array<{
    id: string;
    name: string;
  }>;
  completedAt: Date;
  onEdit?: () => void;
}

export default function AgentResultDialog({
  isOpen,
  onClose,
  taskName,
  agentType,
  result,
  files,
  completedAt,
  onEdit,
}: AgentResultDialogProps) {
  const getAgentTypeLabel = (type: string) => {
    const labels: Record<string, string> = {
      "note-taker": "Note Taker",
      researcher: "Researcher",
      "study-buddy": "Study Buddy",
      assignment: "Assignment Helper",
    };
    return labels[type] || type;
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const handleDownload = () => {
    const blob = new Blob([result.content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${taskName}.${result.format === "json" ? "json" : "md"}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 w-screen h-screen flex items-center justify-center p-8 z-50"
      style={{
        backgroundColor: "rgba(0, 0, 0, 0.5)",
        backdropFilter: "blur(4px)",
        WebkitBackdropFilter: "blur(4px)",
      }}
      onClick={onClose}
    >
      <div
        className="bg-white rounded-lg shadow-xl w-full max-w-4xl flex flex-col"
        style={{ maxHeight: "calc(100vh - 4rem)" }}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="px-8 py-6 border-b flex items-start justify-between flex-shrink-0">
          <div className="flex-1">
            <h1 className="text-2xl font-bold text-gray-900">{taskName}</h1>
            <div className="flex items-center gap-3 text-sm text-gray-600 mt-2">
              <span className="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium">
                {getAgentTypeLabel(agentType)}
              </span>
              <span>•</span>
              <span>{formatDate(completedAt)}</span>
              <span>•</span>
              <span>
                {files.length} file{files.length !== 1 ? "s" : ""}
              </span>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 rounded-md hover:bg-gray-100 transition-colors"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        {/* Content - Professional Document Style */}
        <div className="flex-1 overflow-y-auto">
          <div className="px-8 py-6 max-w-4xl mx-auto">
            {/* Files Used Section */}
            <div className="mb-8 p-4 bg-gray-50 rounded-lg border border-gray-200">
              <h3 className="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
                <FileText className="w-4 h-4" />
                Source Files
              </h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                {files.map((file, index) => (
                  <div
                    key={`${file.id || index}-${file.name}`}
                    className="flex items-center gap-2 text-sm text-gray-600"
                  >
                    <span className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0" />
                    <span className="truncate">{file.name}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Result Content */}
            <div className="bg-white">
              {result.format === "json" ? (
                <pre className="bg-gray-50 p-4 rounded-lg text-xs overflow-x-auto border border-gray-200 font-mono">
                  {JSON.stringify(JSON.parse(result.content), null, 2)}
                </pre>
              ) : (
                <MarkdownRenderer content={result.content} />
              )}
            </div>
          </div>
        </div>

        {/* Footer - Fixed at bottom */}
        <div className="px-8 py-4 border-t bg-gray-50 flex-shrink-0 rounded-b-lg">
          <div className="flex justify-between items-center">
            <div className="text-xs text-gray-500">
              Generated by {getAgentTypeLabel(agentType)} AI Assistant
            </div>
            <div className="flex gap-3">
              <button
                onClick={handleDownload}
                className="px-4 py-2 text-sm border border-gray-300 text-gray-700 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--custom-primary-color)] flex items-center gap-2 cursor-pointer"
              >
                <Download className="w-4 h-4" />
                Download
              </button>
              <button
                onClick={() => {
                  if (onEdit) {
                    onEdit();
                  }
                  onClose();
                }}
                className="px-4 py-2 text-sm bg-[var(--custom-primary-color)] text-white rounded-md hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--custom-primary-color)] flex items-center gap-2 cursor-pointer"
              >
                <Edit className="w-4 h-4" />
                Edit
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
